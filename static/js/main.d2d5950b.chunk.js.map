{"version":3,"sources":["data/tabelaGoblin.js","data/tabelaDeAtributos.js","data/tabelaDeEquipamentos.js","gerador.js","App.js","serviceWorker.js","index.js"],"names":["tabelaGoblin","coloracao","caracteristica","ocupacao","comecoDoNome","fimDoNome","tabelaDeAtributos","Verde Claro","combate","conhecimento","habilidade","sorte","Verde Escuro","Vermelho","Verde","Amarelo","Azul","Mercenário","Caçador","Gatuno","Líder","Piromaníaco","Xamã","equipamentoLeve","equipamentoPesado","tabelaDeEquipamentos","rolarD6","Random","integer","goblinMaldito","nome","calcularAtributoDeCombate","calcularAtributoDeConhecimento","calcularAtributoDeHabilidade","calcularAtributoDeSorte","equipamento","gerarEquipamento","App","_goblinMaldito","react_default","a","createElement","className","concat","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yMA2CeA,EA3CM,CACnBC,UAAW,CACT,cACA,QACA,eACA,UACA,WACA,QAEFC,eAAgB,CACd,SACA,YACA,iBACA,QACA,cACA,kBAEFC,SAAU,CACR,gBACA,aACA,SACA,WACA,iBACA,WAEFC,aAAc,CACZ,KACA,KACA,KACA,KACA,KACA,MAEFC,UAAW,CACT,KACA,KACA,KACA,KACA,KACA,OCwCWC,EA/EW,CACxBL,UAAW,CACTM,cAAe,CACbC,QAAS,EACTC,aAAc,EACdC,WAAY,EACZC,MAAO,GAETC,eAAgB,CACdJ,QAAS,EACTC,aAAc,EACdC,WAAY,EACZC,MAAO,GAETE,SAAU,CACRL,QAAS,EACTC,aAAc,EACdC,WAAY,EACZC,MAAO,GAETG,MAAO,CACLN,QAAS,EACTC,aAAc,EACdC,WAAY,EACZC,MAAO,GAETI,QAAS,CACPP,QAAS,EACTC,aAAc,EACdC,WAAY,EACZC,MAAO,GAETK,KAAM,CACJR,QAAS,EACTC,aAAc,EACdC,WAAY,EACZC,MAAO,IAGXR,SAAU,CACRc,gBAAY,CACVT,QAAS,EACTC,aAAc,EACdC,WAAY,EACZC,MAAO,GAETO,aAAS,CACPV,QAAS,EACTC,aAAc,EACdC,WAAY,EACZC,MAAO,GAETQ,OAAQ,CACNX,QAAS,EACTC,aAAc,EACdC,WAAY,EACZC,MAAO,GAETS,WAAO,CACLZ,QAAS,EACTC,aAAc,EACdC,WAAY,EACZC,MAAO,GAETU,iBAAa,CACXb,QAAS,EACTC,aAAc,EACdC,WAAY,EACZC,MAAO,GAETW,UAAM,CACJd,QAAS,EACTC,aAAc,EACdC,WAAY,EACZC,MAAO,KC1EPY,EAAkB,CACtB,YACA,QACA,eACA,gBACA,WACA,gBAGIC,EAAoB,CACxB,kBACA,iBACA,iBACA,WACA,uBACA,8BA4DaC,EATc,CAC3BR,gBAAYO,EACZN,aAASK,EACTJ,OAAQI,EACRH,WAAOI,EACPH,iBArD2B,CAC3B,iBACA,aACA,wBACA,uBACA,kCACA,aAgDAC,UAAM,UCnEFI,EAAU,WAGd,OAFe,IAAIC,KAELC,QAAQ,EAAG,IAwEZC,EA1BO,WACpB,IAAM5B,EAAYD,EAAaC,UAAUyB,KACnCxB,EAAiBF,EAAaE,eAAewB,KAC7CvB,EAAWH,EAAaG,SAASuB,KAoBvC,MAZe,CACbI,KAtDmB9B,EAAaI,aAAasB,KAC7B1B,EAAaK,UAAUqB,KAsDvCzB,YACAC,iBACAC,WACAK,QApD8B,SAACP,EAAWE,GAI5C,OAH6BG,EAAkBL,UAAUA,GAAWO,QACxCF,EAAkBH,SAASA,GAAUK,QAuCjDuB,CAA0B9B,EAAWE,GAYnDM,aA9CmC,SAACR,EAAWE,GAIjD,OAH6BG,EAAkBL,UAAUA,GAAWQ,aACxCH,EAAkBH,SAASA,GAAUM,aAiC5CuB,CAA+B/B,EAAWE,GAY7DO,WAxCiC,SAACT,EAAWE,GAI/C,OAH6BG,EAAkBL,UAAUA,GAAWS,WACxCJ,EAAkBH,SAASA,GAAUO,WA2B9CuB,CAA6BhC,EAAWE,GAYzDQ,MAlC4B,SAACV,EAAWE,GAI1C,OAH6BG,EAAkBL,UAAUA,GAAWU,MACxCL,EAAkBH,SAASA,GAAUQ,MAqBnDuB,CAAwBjC,EAAWE,GAY/CgC,YA5BqB,SAAChC,GACxB,MAAiB,YAAbA,EACKsB,EAAqBtB,GAGvBsB,EAAqBtB,GAAUuB,KAYlBU,CAAiBjC,KCxBxBkC,MAlCf,WAAe,IAAAC,EAWTT,IATFC,EAFWQ,EAEXR,KACA7B,EAHWqC,EAGXrC,UACAC,EAJWoC,EAIXpC,eACAC,EALWmC,EAKXnC,SACAK,EANW8B,EAMX9B,QACAC,EAPW6B,EAOX7B,aACAC,EARW4B,EAQX5B,WACAC,EATW2B,EASX3B,MACAwB,EAVWG,EAUXH,YAGF,OACEI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,kBACEF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,SAAIX,GACJS,EAAAC,EAAAC,cAAA,0BAAAE,OAAkB1C,EAAlB,OAAA0C,OAAiCzC,IACjCqC,EAAAC,EAAAC,cAAA,4BAAAE,OAAiBxC,IAEjBoC,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,qBAAAE,OAAgBnC,IAChB+B,EAAAC,EAAAC,cAAA,0BAAAE,OAAqBlC,IACrB8B,EAAAC,EAAAC,cAAA,wBAAAE,OAAmBjC,IACnB6B,EAAAC,EAAAC,cAAA,mBAAAE,OAAchC,IAEd4B,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,SAAIN,MCrBQS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOX,EAAAC,EAAAC,cAACU,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d2d5950b.chunk.js","sourcesContent":["const tabelaGoblin = {\n  coloracao: [\n    'Verde Claro',\n    'Verde',\n    'Verde Escuro',\n    'Amarelo',\n    'Vermelho',\n    'Azul',\n  ],\n  caracteristica: [\n    'Insano',\n    'Fedorento',\n    'com Cicatrizes',\n    'Gordo',\n    'Fala Errado',\n    'com Anomalia *',\n  ],\n  ocupacao: [\n    'Mercenário',\n    'Caçador',\n    'Gatuno',\n    'Líder',\n    'Piromaníaco',\n    'Xamã',\n  ],\n  comecoDoNome: [\n    'Sp',\n    'Cr',\n    'Bu',\n    'Ut',\n    'An',\n    'Om',\n  ],\n  fimDoNome: [\n    'or',\n    'ut',\n    'ar',\n    'an',\n    'ot',\n    'ec',\n  ],\n};\n\nexport default tabelaGoblin;\n","const tabelaDeAtributos = {\n  coloracao: {\n    'Verde Claro': {\n      combate: 2,\n      conhecimento: 2,\n      habilidade: 1,\n      sorte: 1,\n    },\n    'Verde Escuro': {\n      combate: 2,\n      conhecimento: 1,\n      habilidade: 2,\n      sorte: 1,\n    },\n    Vermelho: {\n      combate: 1,\n      conhecimento: 2,\n      habilidade: 2,\n      sorte: 1,\n    },\n    Verde: {\n      combate: 2,\n      conhecimento: 1,\n      habilidade: 1,\n      sorte: 2,\n    },\n    Amarelo: {\n      combate: 1,\n      conhecimento: 1,\n      habilidade: 2,\n      sorte: 2,\n    },\n    Azul: {\n      combate: 1,\n      conhecimento: 2,\n      habilidade: 1,\n      sorte: 2,\n    },\n  },\n  ocupacao: {\n    Mercenário: {\n      combate: 1,\n      conhecimento: 0,\n      habilidade: 1,\n      sorte: 0,\n    },\n    Caçador: {\n      combate: 1,\n      conhecimento: 0,\n      habilidade: 0,\n      sorte: 1,\n    },\n    Gatuno: {\n      combate: 0,\n      conhecimento: 1,\n      habilidade: 1,\n      sorte: 0,\n    },\n    Líder: {\n      combate: 1,\n      conhecimento: 1,\n      habilidade: 0,\n      sorte: 0,\n    },\n    Piromaníaco: {\n      combate: 0,\n      conhecimento: 0,\n      habilidade: 1,\n      sorte: 1,\n    },\n    Xamã: {\n      combate: 0,\n      conhecimento: 1,\n      habilidade: 0,\n      sorte: 1,\n    },\n  },\n};\n\nexport default tabelaDeAtributos;\n","const equipamentoLeve = [\n  '2 Adagas*',\n  'Adaga',\n  'Arco Simples',\n  'Arco Composto',\n  '4 Adagas',\n  'Besta e Elmo',\n];\n\nconst equipamentoPesado = [\n  'Espada e Escudo',\n  'Machado e Elmo',\n  '2 Machadinhas*',\n  'Espadona',\n  '2 Espadas e Armadura',\n  'Adaga *, Espada e Armadura',\n];\n\nconst equipamentoExplosivo = [\n  'Pistola e Elmo',\n  '2 Pistolas',\n  '3 Galinhas Explosivas',\n  'Barril de Pólvora',\n  'Pistola e 2 Galinhas Explosivas',\n  'Canhão',\n];\n\nconst armasEDanos = [\n  {\n    Adaga: 2,\n  },\n  {\n    'Arco Simples': 2,\n  },\n  {\n    'Arco Composto': 3,\n  },\n  {\n    Besta: 3,\n  },\n  {\n    Espada: 3,\n  },\n  {\n    Machado: 4,\n  },\n  {\n    Machadinha: 3,\n  },\n  {\n    Espadona: 5,\n  },\n  {\n    Pistola: 4,\n  },\n  {\n    'Galinhas Explosivas': 4,\n  },\n  {\n    'Barril de Pólvora': 5,\n  },\n  {\n    Canhão: 8,\n  },\n];\n\nconst tabelaDeEquipamentos = {\n  Mercenário: equipamentoPesado,\n  Caçador: equipamentoLeve,\n  Gatuno: equipamentoLeve,\n  Líder: equipamentoPesado,\n  Piromaníaco: equipamentoExplosivo,\n  Xamã: 'Cajado',\n};\n\nexport default tabelaDeEquipamentos;\n","import { Random } from 'random-js';\nimport tabelaGoblin from './data/tabelaGoblin';\nimport tabelaDeAtributos from './data/tabelaDeAtributos';\nimport tabelaDeEquipamentos from './data/tabelaDeEquipamentos';\n\nconst rolarD6 = () => {\n  const random = new Random();\n\n  return random.integer(0, 5);\n};\n\nconst gerarNomeDoGoblin = () => {\n  const comecoDoNome = tabelaGoblin.comecoDoNome[rolarD6()];\n  const fimDoNome = tabelaGoblin.fimDoNome[rolarD6()];\n\n  return comecoDoNome + fimDoNome;\n};\n\nconst calcularAtributoDeCombate = (coloracao, ocupacao) => {\n  const atributoPorColoracao = tabelaDeAtributos.coloracao[coloracao].combate;\n  const atributoPorOcupacao = tabelaDeAtributos.ocupacao[ocupacao].combate;\n\n  return atributoPorColoracao + atributoPorOcupacao;\n};\n\nconst calcularAtributoDeConhecimento = (coloracao, ocupacao) => {\n  const atributoPorColoracao = tabelaDeAtributos.coloracao[coloracao].conhecimento;\n  const atributoPorOcupacao = tabelaDeAtributos.ocupacao[ocupacao].conhecimento;\n\n  return atributoPorColoracao + atributoPorOcupacao;\n};\n\nconst calcularAtributoDeHabilidade = (coloracao, ocupacao) => {\n  const atributoPorColoracao = tabelaDeAtributos.coloracao[coloracao].habilidade;\n  const atributoPorOcupacao = tabelaDeAtributos.ocupacao[ocupacao].habilidade;\n\n  return atributoPorColoracao + atributoPorOcupacao;\n};\n\nconst calcularAtributoDeSorte = (coloracao, ocupacao) => {\n  const atributoPorColoracao = tabelaDeAtributos.coloracao[coloracao].sorte;\n  const atributoPorOcupacao = tabelaDeAtributos.ocupacao[ocupacao].sorte;\n\n  return atributoPorColoracao + atributoPorOcupacao;\n};\n\nconst gerarEquipamento = (ocupacao) => {\n  if (ocupacao === 'Xamã') {\n    return tabelaDeEquipamentos[ocupacao];\n  }\n\n  return tabelaDeEquipamentos[ocupacao][rolarD6()];\n};\n\nconst goblinMaldito = () => {\n  const coloracao = tabelaGoblin.coloracao[rolarD6()];\n  const caracteristica = tabelaGoblin.caracteristica[rolarD6()];\n  const ocupacao = tabelaGoblin.ocupacao[rolarD6()];\n  const nome = gerarNomeDoGoblin();\n  const combate = calcularAtributoDeCombate(coloracao, ocupacao);\n  const conhecimento = calcularAtributoDeConhecimento(coloracao, ocupacao);\n  const habilidade = calcularAtributoDeHabilidade(coloracao, ocupacao);\n  const sorte = calcularAtributoDeSorte(coloracao, ocupacao);\n  const equipamento = gerarEquipamento(ocupacao);\n\n  const goblin = {\n    nome,\n    coloracao,\n    caracteristica,\n    ocupacao,\n    combate,\n    conhecimento,\n    habilidade,\n    sorte,\n    equipamento,\n  };\n\n  return goblin;\n};\n\nexport default goblinMaldito;\n","import React from 'react';\nimport './App.css';\nimport { WiredCard } from 'wired-elements';\nimport goblinMaldito from './gerador';\n\nfunction App() {\n  const {\n    nome,\n    coloracao,\n    caracteristica,\n    ocupacao,\n    combate,\n    conhecimento,\n    habilidade,\n    sorte,\n    equipamento,\n  } = goblinMaldito();\n\n  return (\n    <div className=\"App\">\n      <wired-card>\n        <h1>Goblin</h1>\n        <p>{nome}</p>\n        <p>{`Aparência: ${coloracao} e ${caracteristica}`}</p>\n        <p>{`Ocupação: ${ocupacao}`}</p>\n\n        <h3>Atributos</h3>\n        <p>{`Combate: ${combate}`}</p>\n        <p>{`Conhecimento: ${conhecimento}`}</p>\n        <p>{`Habilidade: ${habilidade}`}</p>\n        <p>{`Sorte: ${sorte}`}</p>\n\n        <h3>Equipamentos</h3>\n        <p>{equipamento}</p>\n      </wired-card>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}